{"version":3,"sources":["logo.svg","Apicall.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Apicall","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","ls","title","authors","publishDate","keyword","getBookData","bind","assertThisInitialized","_this2","console","log","location","axios","get","then","res","data","items","setState","map","obj","volumeInfo","publishedDate","catch","error","message","react_default","a","createElement","className","item","key","id","Component","App","api","redirectToReferrer","getKeyword","e","preventDefault","refs","search","value","router","push","pathname","onSubmit","type","ref","placeholder","Boolean","window","hostname","match","ReactDOM","render","es","history","browserHistory","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.66c1dd94.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport axios from 'axios'\r\n\r\nclass Apicall extends Component {\r\n\r\n\r\n//https://www.googleapis.com/books/v1/volumes?q=sherlock\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\r\n\t\t\tls : [],\r\n\t\t\ttitle : [],\r\n\t\t\tauthors : [],\r\n\t\t\tpublishDate : [],\r\n\t\t\tkeyword : ''\r\n\t\t}\r\n\t\t\r\n\t\tthis.getBookData = this.getBookData.bind(this);\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.getBookData();\r\n\t}\r\n\r\n\tgetBookData(){\r\n\t\tconsole.log(this.props.location.state.keyword);\r\n\t\taxios.get(\"https://www.googleapis.com/books/v1/volumes?q=\"+this.props.location.state.keyword)\r\n\t\t.then(res => {\r\n\t\t\tconsole.log('response', res);\r\n\t\t\tconsole.log('response data', res.data.items);\r\n\t\t\t\r\n\t\t\tconst title = res.data.items;\r\n\t\t\tthis.setState({title}); \r\n\t\t\tconsole.log('title', this.state.title);\r\n\r\n\t\t\tconst publishDate = res.data.items.map(obj => obj.volumeInfo.publishedDate);\r\n\t\t\tthis.setState({publishDate});\r\n\t\t\tconsole.log('date', this.state.publishDate);\r\n\r\n\t\t\tvar authors = res.data.items.map(obj => obj.volumeInfo.authors);\r\n\t\t\tthis.setState({authors});\r\n\t\t\tconsole.log('date', this.state.authors);\r\n\t\t\t\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\tconsole.log('Error', error.message);\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n    \treturn (\r\n      \t<div className=\"App\">\r\n\r\n        \t<ol>\r\n        \t\t{this.state.title.map(item =>\r\n        \t\t\t<li key={item.id}>{item.volumeInfo.title} \r\n        \t\t\t\t<div>\r\n        \t\t\t\t\t<ul>\r\n        \t\t\t\t\t\t<li>{item.volumeInfo.authors}</li>\r\n        \t\t\t\t\t</ul>\r\n        \t\t\t\t</div>\r\n        \t\t\t\t\t</li>)}\r\n        \t</ol>\r\n        \t\r\n        \t<ul>\r\n        \t\t{this.state.authors.map(item =>\r\n        \t\t<li>{item}</li>)}\r\n        \t</ul>\r\n\r\n      \t</div>\r\n    \t);\r\n  \t}\r\n}\r\n\r\nexport default Apicall;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Apicall from './Apicall'\nimport {Redirect} from 'react-router';\n\nclass App extends Component {\n  \n  constructor(props){\n    super(props);\n\n    this.state = {\n      keyword : \"\",\n      api : [],\n      redirectToReferrer : false\n    }\n\n    this.getKeyword = this.getKeyword.bind(this);\n  }\n\n  getKeyword(e){\n    e.preventDefault()\n    \n    console.log(this.refs.search.value);\n\n    var keyword = this.refs.search.value;\n    this.setState({keyword});\n    this.props.router.push({\n      pathname : '/Apicall',\n      state: {\n        keyword : keyword\n      }\n    });\n        \n  }\n\n  render() {\n  console.log(this.state.redirectToReferrer);\n    return (\n      <div className=\"App\">\n        <form onSubmit={this.getKeyword}>\n          <div><input type=\"text\" ref=\"search\" placeholder=\"Search here\"/></div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Router, Route, browserHistory} from 'react-router';\nimport Apicall from './Apicall';\n\nReactDOM.render(\n\t<Router history={browserHistory}>\n\t\t<Route path=\"/\" component={App} />\n\t\t<Route path=\"/Apicall\" component={Apicall} />\n\t</Router>\n\t,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}